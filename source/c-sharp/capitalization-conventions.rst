.. rst-class:: persian

قرارداد بزرگی و کوچکی حروف
===========================

:doc:`English <capitalization-conventions-en>`

این خط مشی ها در این فصل روشی را مطرح می کند که وقتی شما در یک نمونه کد به صورت
مداوم از آن استفاده کنید خواندن و درک نام نوع ها و اعضا و پارامتر ها برای شما 
راحت تر خواهد بود.

قوانین بزرگی و کوچکی حروف برای نام ها
-------------------------------------

برای متفاوت جلوه داده و قابل فهم کردن یک کلمه در یک نام حرف اول کلمه را با
حروف بزرگ بنویسید. در هیچ از زیر خط برای جدا کردن کردن کلمات و یا مهم نشان دادن 
آنها استفاده نکنید. دو راهکار مناسب برای بزرگ و کوچک کردن حروف یک نام وجود
دارد و استفاده از آن بسته به نوع آن مشخص دارد:

-  PascalCasing

-  camelCasing

قرارداد PascalCasing، برای همه نام ها از این قرارداد استفاده می شود به غیر از
نام پارامتر ها، حرف اول همه کلمات با حروف بزرگ و باقی حروف کلمات با حروف کوچک
(بزرگ نشان دادن حرف اول برای مخفف هایی با بیشتر از دو حرف هم به همین صورت است)،
همین طور که در مثال زیر نشان داده شده است:

| ``PropertyDescriptor``
| ``HtmlTag``

یک نمونه خاص که یک مخفف دو حرفی در ابتدای یک نام آمده است و ما هر دو حرف این 
مخفف را با حروف بزرگ می نویسیم، همان طور که در مثال زیر نمایش داده شده است:

``IOStream``

قرارداد camelCasing، تنها برای نام پارمتر ها استفاده می شود، حرف اول تمام کلمات
بزرگ نمایش داده می شوند به غیر از کلمه اول که همه حروف آن کوچک نمایش داده 
می شود. همین طور که در مثلا زیر می بینید حتی مخفف های با دو حرف طول هم با حروف
کوچک نمایش داده می شوند.

| ``propertyDescriptor``
| ``ioStream``
| ``htmlTag``

**✓ انجام دهید** از PascalCasing برای نام تمام اعضای عمومی public، انواع (type
ها) و فضاهای نامی (namespace ها) که از چندین کلمه تشکیل شده اند استفاده کنید.

**✓ انجام دهید** از camelCasing برای نام پارامتر ها استفاده کنید.

جدول زیر قوانین بزرگی و کوچکی حروف را در در انواع حالت های نام برای انواع 
مشخصه ها توصیف می کند.

.. rst-class:: ltr

+------------+--------+------------------------------------------------+
| Identifier | Casing | Example                                        |
+============+========+================================================+
| Namespace  | Pascal | ``namespace System.Security { ... }``          |
+------------+--------+------------------------------------------------+
| Type       | Pascal | ``public class StreamReader { ... }``          |
+------------+--------+------------------------------------------------+
| Interface  | Pascal | ``public interface IEnumerable { ... }``       |
+------------+--------+------------------------------------------------+
| Method     | Pascal | | ``public class Object {``                    |
|            |        | | ``public virtual string ToString();``        |
|            |        | | ``}``                                        |
+------------+--------+------------------------------------------------+
| Property   | Pascal | | ``public class String {``                    |
|            |        | | ``public int Length { get; }``               |
|            |        | | ``}``                                        |
+------------+--------+------------------------------------------------+
| Event      | Pascal | | ``public class Process {``                   |
|            |        | | ``public event EventHandler Exited;``        |
|            |        | | ``}``                                        |
+------------+--------+------------------------------------------------+
| Field      | Pascal | | ``public class MessageQueue {``              |
|            |        | | ``public static readonly TimeSpan``          |
|            |        | | ``InfiniteTimeout;``                         |
|            |        | | ``}``                                        |
|            |        | | ``public struct UInt32 {``                   |
|            |        | | ``public const Min = 0;``                    |
|            |        | | ``}``                                        |
+------------+--------+------------------------------------------------+
| Enum value | Pascal | | ``public enum FileMode {``                   |
|            |        | | ``Append,``                                  |
|            |        | | ``...``                                      |
|            |        | | ``}``                                        |
+------------+--------+------------------------------------------------+
| Parameter  | Camel  | | ``public class Convert {``                   |
|            |        | | ``public static int ToInt32(string value);`` |
|            |        | | ``}``                                        |
+------------+--------+------------------------------------------------+

بزرگی و کوچکی حروف کلمات ترکیبی و اصطلاحات عمومی
------------------------------------------------

بیشتر اصطلاحات ترکیبی به عنوان یک کلمه واحد برای بزرگی و کوچکی حروف در نظر گرفته
می شوند

**X اجتناب کنید** بزرگ کردن حروف هر کلمه در کلمات ترکیبی که به اصطلاح در یک قالب
بسته بندی شده اند.

در بحث بزرگی و کوچکی حروف کلمات ترکیبی که به صورت یک کلمه واحد نوشته می شوند مثلا
endpoint به عنوان یک کلمه در نظر گرفته می شوند و همچنین کلمات ترکیبی که در قالب
بسته بندی شده نمایش داده می شوند هم به عنوان یک کلمه در نظر گرفته می شود. برای
نمونه از جدول زیر برای بررسی اینکه کلمات به صورت ترکیبی نوشته شده اند یا جدا
استفاده کنید.

=============== =============== ======================
Pascal          Camel           Not
=============== =============== ======================
``BitFlag``     ``bitFlag``     ``Bitflag``
``Callback``    ``callback``    ``CallBack``
``Canceled``    ``canceled``    ``Cancelled``
``DoNot``       ``doNot``       ``Don't``
``Email``       ``email``       ``EMail``
``Endpoint``    ``endpoint``    ``EndPoint``
``FileName``    ``fileName``    ``Filename``
``Gridline``    ``gridline``    ``GridLine``
``Hashtable``   ``hashtable``   ``HashTable``
``Id``          ``id``          ``ID``
``Indexes``     ``indexes``     ``Indices``
``LogOff``      ``logOff``      ``LogOut``
``LogOn``       ``logOn``       ``LogIn``
``Metadata``    ``metadata``    ``MetaData, metaData``
``Multipanel``  ``multipanel``  ``MultiPanel``
``Multiview``   ``multiview``   ``MultiView``
``Namespace``   ``namespace``   ``NameSpace``
``Ok``          ``ok``          ``OK``
``Pi``          ``pi``          ``PI``
``Placeholder`` ``placeholder`` ``PlaceHolder``
``SignIn``      ``signIn``      ``SignOn``
``SignOut``     ``signOut``     ``SignOff``
``UserName``    ``userName``    ``Username``
``WhiteSpace``  ``whiteSpace``  ``Whitespace``
``Writable``    ``writable``    ``Writeable``
=============== =============== ======================

حساس به بزرگی و کوچکی حروف
--------------------------

زبان های برنامه نویسی ای که به صورت مفسری کار می کنند اغلب نیاز ندارند که نسبت
به بزرگی و کوچکی حروف حساس باشند اگرچه از زبان ها هم این حساسیت را دارند. حتی 
اگر زبانی اکه استفاده می کنید این حساسیت را دارد باز هم ممکن است زبان های دیگری
به framework شما دسترسی داشته باشند که این حساسیت را نداشته باشند بنابراین برای 
هر API ای که به صورت خارجی قابل دسترس است تنها به بزرگی و کوچکی حرف برای ایجاد 
تفاوت در نام ها استفاده نکنید.

**X اجتناب کنید** فرض کنید همه زبان های برنامه نویسی حساس به بزرگی و کوچکی حروف
هستند. این طور نیست همه زبان ها این حساسیت را ندارند پس نام ها نباید و فقط در 
وضعیت بزرگی و کوچکی حروف باهم تفاوت داشته باشند.

