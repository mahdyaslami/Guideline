.. rst-class:: persian

قرارداد های عمومی در نامگذاری
=============================

:doc:`English <general-naming-conventions-en>`

این بخش قرارداد های عمومی نامگذاری را شرح می دهد که با انتخاب نام ها ارتباط 
دارد، خط مشی استفاده از مخفف ها و اختصار ها، و توصیه هایی درباره اینکه چطور از
از استفاده از کلمات کلیدی یک زبان برنامه نویسی اجتناب کنیم.

انتخاب کلمه
-----------

**✓ انجام دهید** انتخاب راحترین و خوانا ترین نام برای یک مشخصه.

برای نمونه، یک پراپرتی که ``HorizontalAlignment`` انتخاب شده است بسیار خوانا تر
از نام ``AlignmentHorizontal`` در زبان انگلیسی است.

**✓ انجام دهید** انتخاب خوانا ترین به جای مختصر ترین.

نام پراپرتی ``CanScrollHorizontally`` بهتر از نام ``ScrollableX`` است (یک ارجاع
مبهم به محور افقی - X ها).

**X انجام ندهید** استفاده از زیر خط، خط تیره، یا هر کاراکتر غیر الفبایی و عددی.

**X انجام ندهید** استفاده از شیوه `نامگذاری مجارستانی`_

**X اجتناب کنید** استفاده از مشخصه ها و نام هایی که با کلمات کلیدی زبان های 
برنامه نویسی تلاقی دارد.

بر اساس قانون 4 مشخصات زبان های عمومی (CLS)، همه زبان های موظف هستند ساز و کاری
جهت استفاده از کلمات کلید زبان فراهم کنند. C Sharp برای مثال از علامت @ بعنوان 
یک ساز و کار در این نمونه استفاده می کند. با این حال استفاده نکردن از کلمات 
کلیدی در نامگذاری یک ایده خوب محسوب می شود چون پیدا کردن یک تابع که نام آن با
کارکتر @ (escape) است کار دشواری است.

استفاده از اختصارات و مخفف ها
-----------------------------

**X انجام ندهید** استفاده از مخفف ها و اختصارات به عنوان بخشی از نام یک مشخصه.

برای مثال، استفاده از ``GetWin`` به جای ``GetWindow``.

**X انجام ندهید** استفاده از هر مخففی که به صورت عمومی پذیرفته شده نیست، اگر هم 
پذیرفته شده است فقط در صورت ضررت استفاده کنید.

استفاده نکردن از مشخصه های زبان
-------------------------------

**✓ انجام دهید** از نام های مترادف استفاده کنید به جای اینکه از کلمات کلیدی زبان 
برنامه نویسی استفاده کنید.

برای مثال، ``GetLength`` بهتر از ``GetInt`` است.

**✓ انجام دهید** در موارد نادری که مجبور هستید از نام انواع در نام مشخصه استفاده 
کنید از نام CLR آنها به جای نامی که کلمه کلیدی است استفاده کنید.

برای مثال، متدی که قرار است مقداری را به نوع ``System.Int64`` تبدیل کند بهتر است 
نام ``ToInt64`` داشته باشد، نه نام ``ToLong``(چون ``System.Int64`` نام CLR برای
کلمه کلیدی ``long`` در زبان C Sharp است). جدول زیر نام های CLR انواع داده را در
زبان های برنامه نویسی مختلف بیان می کند.

.. rst-class:: ltr

========== ============ ======================= ===========
C#         Visual Basic C++                     CLR
========== ============ ======================= ===========
**sbyte**  **SByte**    **char**                **SByte**
**byte**   **Byte**     **unsigned char**       **Byte**
**short**  **Short**    **short**               **Int16**
**ushort** **UInt16**   **unsigned short**      **UInt16**
**int**    **Integer**  **int**                 **Int32**
**uint**   **UInt32**   **unsigned int**        **UInt32**
**long**   **Long**     **__int64**             **Int64**
**ulong**  **UInt64**   **unsigned __int64**    **UInt64**
**float**  **Single**   **float**               **Single**
**double** **Double**   **double**              **Double**
**bool**   **Boolean**  **bool**                **Boolean**
**char**   **Char**     **wchar_t**             **Char**
**string** **String**   **String**              **String**
**object** **Object**   **Object**              **Object**
========== ============ ======================= ===========

**✓ انجام دهید** در موارد نادری که مشخصه هیچ مترادفی ندارد و نوع پارامتر اهمیتی 
ندارد از نام های عمومی استفاده کنید، مثل ``Value`` یا ``item``، به جای اینکه نام
نوع داده را تکرار کنید.

نامگذاری نسخه جدید یک API موجود
-------------------------------

**✓ انجام دهید** زمانیکه یک نسخه جدید API را ایجاد می کنید از نام هایی شبیه 
آنهایی که در API های قدیمی هستند استفاده کنید.

این کار کمک می کند تا ارتباط بین API ها را پر رنگ تر شوند.

**✓ انجام دهید** ترجیحا پسوند به نام ها اضافه کنید به جای پیشوند در نامگذاری 
برای مشخص کردن API های جدید.

این کار به پیدا کردن API ها هنگام خواندن مستندات کمک خواهد کرد یا زمانیکه از 
IntelliSense استفاده می کنید، چون معمولا مرورگر ها و IntelliSense ها مشخصه ها را 
برا اساس حروف الفبا مرتب می کنند.

**✓ لحاظ کنید** استفاده از یک نام جدید و با معنا به جای اضافه کردن پیشوند و 
پسوند به نام قبلی.

**✓ انجام دهید** از پسوند های عددی برای نام نسخه جدید یک API استفاده کنید خصوصا
زمانیکه بهترین و مناسب ترین نام دقیقا نام همان API قدیمی است (در صورتی که با 
استاندارد های شرکت منافاتی ندارد) و اگر اضافه کردن یک پسوند با معنا و یا تغییر 
دادن نام مقدور نیست.

**X انجام ندهید** استفاده کردن از پسوند هایی مثل ``Ex`` یا مشابه برای متمایز 
کردن یک مشخصه با نسخه قدیمی تر آن.

**✓ انجام دهید** برای API هایی که در نسخه جدید از ``Int64`` یا همان ``long`` به 
جای ``int`` استفاده می کنند از پسوند ``64`` استفاده کنید. البته برای اینکه کار 
در صورتی انجام دهید که نسخه قدیمی 32 بیتی هم وجود دارد برای API هایی که فقط نسخه
64 بیتی دارند این پسوند را اضافه نکنید.


.. _نامگذاری مجارستانی: https://en.wikipedia.org/wiki/Hungarian_notation